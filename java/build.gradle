plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'java'
}

group 'edu.umn.biomedicus'

def gitVersion = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--dirty'
        standardOutput = stdout
    }
    def pattern = ~/v([0-9]+)(?:.([0-9]+))?(?:.([0-9]+))?(?:-(alpha|beta|pre|rc).([0-9]+))?(?:-([0-9]+)-([a-g0-9]+))?(-dirty)?/
    def newVersion = stdout.toString().trim().replaceFirst(pattern) { _,major,minor,patch,pre,preVersion,com,hash,dirty ->
        def incremented = false
        def result = ''
        if (com != null || hash != null || dirty != null) {
            result = '-SNAPSHOT'
        } else {
            incremented = true
        }
        if (pre != null && preVersion != null) {
            if (!incremented) {
                preVersion = (preVersion as int) + 1
                incremented = true
            }
            result = "-${pre}${preVersion}${result}"
        }
        if (patch != null) {
            if (!incremented) {
                patch = (patch as int) + 1
                incremented = true
            }
            result = ".${patch}${result}"
        }
        if (minor != null) {
            if (!incremented) {
                minor = (minor as int) + 1
                incremented = true
            }
            result = ".${minor}${result}"
        }
        if (!incremented) {
            major = (major as int) + 1
        }
        result = "${major}${result}"
        return result
    }
    return newVersion
}

version gitVersion()

targetCompatibility = 1.8
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
}

def junitVersion = '5.3.1'
def slf4jVersion = '1.7.26'
def jaxbVersion = '2.3.2'

dependencies {
    implementation group: 'org.jetbrains', name: 'annotations', version: '17.0.0'

    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    implementation group: 'edu.umn.nlpie', name: 'mtap', version: '[0.5.0, )'
    implementation group: 'edu.umn.biomedicus', name: 'biomedicus-tokenizer', version: '0.0.3'
    implementation group: 'org.rocksdb', name: 'rocksdbjni', version: '6.0.1'
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.8'

    implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: jaxbVersion
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.24'
    implementation group: 'org.simpleframework', name: 'simple-xml', version: '2.7.1'

    runtimeOnly group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: jaxbVersion
    runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.13.0'
    runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.0'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.+'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
}

test {
    useJUnitPlatform()
}

shadowJar {
    manifest {
        attributes 'Implementation-Title': 'BioMedICUS',
                'Description': 'A system for large-scale text analysis and processing of biomedical and clinical reports.',
                'Implementation-Version': archiveVersion
    }
    mergeServiceFiles()
}

task execute(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = project.hasProperty('mainClass') ? project.getProperties().get('mainClass') : null
}

task conceptsUtility(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main 'edu.umn.biomedicus.concepts.ConceptsUtility'
}

task writeVersion() {
    doLast {
        new File(buildDir, "version.txt").text = "$version\n"
    }
}
